// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// snp_binomial_cpp_parallel
NumericVector snp_binomial_cpp_parallel(DataFrame& df_d);
RcppExport SEXP _huGSVcalleR_snp_binomial_cpp_parallel(SEXP df_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df_d(df_dSEXP);
    rcpp_result_gen = Rcpp::wrap(snp_binomial_cpp_parallel(df_d));
    return rcpp_result_gen;
END_RCPP
}
// snp_counting_cpp_parallel
NumericVector snp_counting_cpp_parallel(DataFrame& df_d);
RcppExport SEXP _huGSVcalleR_snp_counting_cpp_parallel(SEXP df_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df_d(df_dSEXP);
    rcpp_result_gen = Rcpp::wrap(snp_counting_cpp_parallel(df_d));
    return rcpp_result_gen;
END_RCPP
}
// snp_entropy_cpp_parallel
NumericVector snp_entropy_cpp_parallel(DataFrame& df_d, bool p_value);
RcppExport SEXP _huGSVcalleR_snp_entropy_cpp_parallel(SEXP df_dSEXP, SEXP p_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df_d(df_dSEXP);
    Rcpp::traits::input_parameter< bool >::type p_value(p_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(snp_entropy_cpp_parallel(df_d, p_value));
    return rcpp_result_gen;
END_RCPP
}
// snp_fisher_cpp_parallel
NumericVector snp_fisher_cpp_parallel(DataFrame& df_d);
RcppExport SEXP _huGSVcalleR_snp_fisher_cpp_parallel(SEXP df_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df_d(df_dSEXP);
    rcpp_result_gen = Rcpp::wrap(snp_fisher_cpp_parallel(df_d));
    return rcpp_result_gen;
END_RCPP
}
// snp_poisson_cpp_parallel
NumericVector snp_poisson_cpp_parallel(DataFrame& df_d);
RcppExport SEXP _huGSVcalleR_snp_poisson_cpp_parallel(SEXP df_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df_d(df_dSEXP);
    rcpp_result_gen = Rcpp::wrap(snp_poisson_cpp_parallel(df_d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_huGSVcalleR_snp_binomial_cpp_parallel", (DL_FUNC) &_huGSVcalleR_snp_binomial_cpp_parallel, 1},
    {"_huGSVcalleR_snp_counting_cpp_parallel", (DL_FUNC) &_huGSVcalleR_snp_counting_cpp_parallel, 1},
    {"_huGSVcalleR_snp_entropy_cpp_parallel", (DL_FUNC) &_huGSVcalleR_snp_entropy_cpp_parallel, 2},
    {"_huGSVcalleR_snp_fisher_cpp_parallel", (DL_FUNC) &_huGSVcalleR_snp_fisher_cpp_parallel, 1},
    {"_huGSVcalleR_snp_poisson_cpp_parallel", (DL_FUNC) &_huGSVcalleR_snp_poisson_cpp_parallel, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_huGSVcalleR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
